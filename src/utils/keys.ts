import { ByteArray } from "@graphprotocol/graph-ts";

const toBytes32 = (x: string): ByteArray => ByteArray.fromUTF8(x);


export const CNAME_BOND_POOL = toBytes32("BondPool");
export const CNAME_CLAIMS_PROCESSOR = toBytes32("Claims Processor");
export const CNAME_COVER = toBytes32("Cover");
export const CNAME_COVER_REASSURANCE = toBytes32("Cover Reassurance");
export const CNAME_COVER_STAKE = toBytes32("Cover Stake");
export const CNAME_CXTOKEN_FACTORY = toBytes32("cxToken Factory");
export const CNAME_GOVERNANCE = toBytes32("Governance");
export const CNAME_LIQUIDITY_ENGINE = toBytes32("Liquidity Engine");
export const CNAME_LIQUIDITY_VAULT = toBytes32("Vault");
export const CNAME_POLICY = toBytes32("Policy");
export const CNAME_POLICY_ADMIN = toBytes32("Policy Admin");
export const CNAME_PROTOCOL = toBytes32("Neptune Mutual Protocol");
export const CNAME_RESOLUTION = toBytes32("Resolution");
export const CNAME_STAKING_POOL = toBytes32("Staking Pool");
export const CNAME_TREASURY = toBytes32("Treasury");
export const CNAME_VAULT_DELEGATE = toBytes32("Vault Delegate");
export const CNAME_VAULT_FACTORY = toBytes32("Vault Factory");
export const CNS_BOND_POOL = toBytes32("cns:pools:bond");
export const CNS_BURNER = toBytes32("cns:core:burner");
export const CNS_CLAIM_PROCESSOR = toBytes32("cns:claim:processor");
export const CNS_CORE = toBytes32("cns:core");
export const CNS_COVER = toBytes32("cns:cover");
export const CNS_COVER_CXTOKEN_FACTORY = toBytes32("cns:cover:cxtoken:factory");
export const CNS_COVER_POLICY = toBytes32("cns:cover:policy");
export const CNS_COVER_POLICY_ADMIN = toBytes32("cns:cover:policy:admin");
export const CNS_COVER_POLICY_MANAGER = toBytes32("cns:cover:policy:manager");
export const CNS_COVER_REASSURANCE = toBytes32("cns:cover:reassurance");
export const CNS_COVER_STABLECOIN = toBytes32("cns:cover:sc");
export const CNS_COVER_STAKE = toBytes32("cns:cover:stake");
export const CNS_COVER_VAULT = toBytes32("cns:cover:vault");
export const CNS_COVER_VAULT_DELEGATE = toBytes32("cns:cover:vault:delegate");
export const CNS_COVER_VAULT_FACTORY = toBytes32("cns:cover:vault:factory");
export const CNS_GOVERNANCE = toBytes32("cns:gov");
export const CNS_GOVERNANCE_RESOLUTION = toBytes32("cns:gov:resolution");
export const CNS_LIQUIDITY_ENGINE = toBytes32("cns:liquidity:engine");
export const CNS_NPM = toBytes32("cns:core:npm:instance");
export const CNS_NPM_PRICE_ORACLE = toBytes32("cns:core:npm:price:oracle");
export const CNS_POOL_BOND = toBytes32("cns:pool:bond");
export const CNS_PRICE_DISCOVERY = toBytes32("cns:core:price:discovery");
export const CNS_STAKING_POOL = toBytes32("cns:pools:staking");
export const CNS_STRATEGY_AAVE = toBytes32("cns:strategy:aave");
export const CNS_STRATEGY_COMPOUND = toBytes32("cns:strategy:compound");
export const CNS_TREASURY = toBytes32("cns:core:treasury");
export const CNS_UNISWAP_V2_FACTORY = toBytes32("cns:core:uni:v2:factory");
export const CNS_UNISWAP_V2_ROUTER = toBytes32("cns:core:uni:v2:router");
export const NS_ACCRUAL_INVOCATION = toBytes32("ns:accrual:invocation");
export const NS_CLAIM_BEGIN_TS = toBytes32("ns:claim:begin:ts");
export const NS_CLAIM_EXPIRY_TS = toBytes32("ns:claim:expiry:ts");
export const NS_CLAIM_PAYOUTS = toBytes32("ns:claim:payouts");
export const NS_CLAIM_PERIOD = toBytes32("ns:claim:period");
export const NS_CLAIM_REPORTER_COMMISSION = toBytes32("ns:claim:reporter:commission");
export const NS_CONTRACTS = toBytes32("ns:contracts");
export const NS_COVER = toBytes32("ns:cover");
export const NS_COVERAGE_LAG = toBytes32("ns:coverage:lag");
export const NS_COVER_CLAIM_BLACKLIST = toBytes32("ns:cover:claim:blacklist");
export const NS_COVER_CREATION_DATE = toBytes32("ns:cover:creation:date");
export const NS_COVER_CREATION_FEE = toBytes32("ns:cover:creation:fee");
export const NS_COVER_CREATION_FEE_EARNING = toBytes32("ns:cover:creation:fee:earning");
export const NS_COVER_CREATION_MIN_STAKE = toBytes32("ns:cover:creation:min:stake");
export const NS_COVER_CREATOR_WHITELIST = toBytes32("ns:cover:creator:whitelist");
export const NS_COVER_CXTOKEN = toBytes32("ns:cover:cxtoken");
export const NS_COVER_HAS_FLASH_LOAN = toBytes32("ns:cover:has:fl");
export const NS_COVER_INFO = toBytes32("ns:cover:info");
export const NS_COVER_LEVERAGE_FACTOR = toBytes32("ns:cover:leverage:factor");
export const NS_COVER_LIQUIDITY_COMMITTED = toBytes32("ns:cover:liquidity:committed");
export const NS_COVER_LIQUIDITY_FLASH_LOAN_FEE = toBytes32("ns:cover:liquidity:fl:fee");
export const NS_COVER_LIQUIDITY_FLASH_LOAN_FEE_PROTOCOL = toBytes32("ns:proto:cover:liquidity:fl:fee");
export const NS_COVER_LIQUIDITY_LENDING_PERIOD = toBytes32("ns:cover:liquidity:len:p");
export const NS_COVER_LIQUIDITY_MAX_LENDING_RATIO = toBytes32("ns:cover:liquidity:max:lr");
export const NS_COVER_LIQUIDITY_MIN_STAKE = toBytes32("ns:cover:liquidity:min:stake");
export const NS_COVER_LIQUIDITY_STAKE = toBytes32("ns:cover:liquidity:stake");
export const NS_COVER_LIQUIDITY_WITHDRAWAL_WINDOW = toBytes32("ns:cover:liquidity:ww");
export const NS_COVER_OWNER = toBytes32("ns:cover:owner");
export const NS_COVER_PLATFORM_FEE = toBytes32("ns:cover:platform:fee");
export const NS_COVER_POLICY_RATE_CEILING = toBytes32("ns:cover:policy:rate:ceiling");
export const NS_COVER_POLICY_RATE_FLOOR = toBytes32("ns:cover:policy:rate:floor");
export const NS_COVER_PRODUCT = toBytes32("ns:cover:product");
export const NS_COVER_PRODUCT_EFFICIENCY = toBytes32("ns:cover:product:efficiency");
export const NS_COVER_REASSURANCE = toBytes32("ns:cover:reassurance");
export const NS_COVER_REASSURANCE_PAYOUT = toBytes32("ns:cover:reassurance:payout");
export const NS_COVER_REASSURANCE_RATE = toBytes32("ns:cover:reassurance:rate");
export const NS_COVER_REASSURANCE_WEIGHT = toBytes32("ns:cover:reassurance:weight");
export const NS_COVER_REQUIRES_WHITELIST = toBytes32("ns:cover:requires:whitelist");
export const NS_COVER_STABLECOIN_NAME = toBytes32("ns:cover:stablecoin:name");
export const NS_COVER_STAKE = toBytes32("ns:cover:stake");
export const NS_COVER_STAKE_OWNED = toBytes32("ns:cover:stake:owned");
export const NS_COVER_STATUS = toBytes32("ns:cover:status");
export const NS_COVER_SUPPORTS_PRODUCTS = toBytes32("ns:cover:supports:products");
export const NS_COVER_USER_WHITELIST = toBytes32("ns:cover:user:whitelist");
export const NS_GOVERNANCE_REPORTER_COMMISSION = toBytes32("ns:gov:reporter:commission");
export const NS_GOVERNANCE_REPORTING_BURN_RATE = toBytes32("ns:gov:rep:burn:rate");
export const NS_GOVERNANCE_REPORTING_FINALIZATION = toBytes32("ns:gov:rep:has:finalized");
export const NS_GOVERNANCE_REPORTING_HAS_A_DISPUTE = toBytes32("ns:gov:rep:has:dispute");
export const NS_GOVERNANCE_REPORTING_INCIDENT_DATE = toBytes32("ns:gov:rep:incident:date");
export const NS_GOVERNANCE_REPORTING_MIN_FIRST_STAKE = toBytes32("ns:gov:rep:min:first:stake");
export const NS_GOVERNANCE_REPORTING_PERIOD = toBytes32("ns:gov:rep:period");
export const NS_GOVERNANCE_REPORTING_STAKE_OWNED_NO = toBytes32("ns:gov:rep:stake:owned:no");
export const NS_GOVERNANCE_REPORTING_STAKE_OWNED_YES = toBytes32("ns:gov:rep:stake:owned:yes");
export const NS_GOVERNANCE_REPORTING_WITNESS_NO = toBytes32("ns:gov:rep:witness:no");
export const NS_GOVERNANCE_REPORTING_WITNESS_YES = toBytes32("ns:gov:rep:witness:yes");
export const NS_GOVERNANCE_RESOLUTION_TS = toBytes32("ns:gov:resolution:ts");
export const NS_GOVERNANCE_UNSTAKEN = toBytes32("ns:gov:unstaken");
export const NS_GOVERNANCE_UNSTAKE_BURNED = toBytes32("ns:gov:unstake:burned");
export const NS_GOVERNANCE_UNSTAKE_REPORTER_FEE = toBytes32("ns:gov:unstake:rep:fee");
export const NS_GOVERNANCE_UNSTAKE_REWARD = toBytes32("ns:gov:unstake:reward");
export const NS_GOVERNANCE_UNSTAKE_TS = toBytes32("ns:gov:unstake:ts");
export const NS_LAST_LIQUIDITY_STATE_UPDATE = toBytes32("ns:last:snl:update");
export const NS_LENDING_STRATEGY_ACTIVE = toBytes32("ns:lending:strategy:active");
export const NS_LENDING_STRATEGY_DISABLED = toBytes32("ns:lending:strategy:disabled");
export const NS_LENDING_STRATEGY_WITHDRAWAL_END = toBytes32("ns:lending:strategy:w:end");
export const NS_LENDING_STRATEGY_WITHDRAWAL_START = toBytes32("ns:lending:strategy:w:start");
export const NS_LIQUIDITY_STATE_UPDATE_INTERVAL = toBytes32("ns:snl:update:interval");
export const NS_MEMBERS = toBytes32("ns:members");
export const NS_POLICY_DISABLED = toBytes32("ns:policy:disabled");
export const NS_POLICY_LAST_PURCHASE_ID = toBytes32("ns:policy:last:purchase:id");
export const NS_RESOLUTION_COOL_DOWN_PERIOD = toBytes32("ns:resolution:cdp");
export const NS_RESOLUTION_DEADLINE = toBytes32("ns:resolution:deadline");
export const NS_VAULT_DEPOSIT_HEIGHTS = toBytes32("ns:vault:deposit:heights");
export const NS_VAULT_LENDING_INCOMES = toBytes32("ns:vault:lending:incomes");
export const NS_VAULT_LENDING_LOSSES = toBytes32("ns:vault:lending:losses");
export const NS_VAULT_STRATEGY_OUT = toBytes32("ns:vault:strategy:out");
export const NS_VAULT_TOKEN_NAME = toBytes32("ns:vault:token:name");
export const NS_VAULT_TOKEN_SYMBOL = toBytes32("ns:vault:token:symbol");
export const NS_BOND_CONTRIBUTION = toBytes32("ns:pool:bond:contribution");
export const NS_BOND_DISCOUNT_RATE = toBytes32("ns:pool:bond:discount");
export const NS_BOND_LP_TOKEN = toBytes32("ns:pool:bond:lq:pair:token");
export const NS_BOND_MAX_UNIT = toBytes32("ns:pool:bond:max:unit");
export const NS_BOND_TOTAL_NPM_ALLOCATED = toBytes32("ns:pool:bond:total:npm:alloc");
export const NS_BOND_TOTAL_NPM_DISTRIBUTED = toBytes32("ns:pool:bond:total:npm:distrib");
export const NS_BOND_TO_CLAIM = toBytes32("ns:pool:bond:to:claim");
export const NS_BOND_UNLOCK_DATE = toBytes32("ns:pool:bond:unlock:date");
export const NS_BOND_VESTING_TERM = toBytes32("ns:pool:bond:vesting:term");
export const NS_POOL_CUMULATIVE_STAKING_AMOUNT = toBytes32("ns:pool:staking:cum:amount");
export const NS_POOL_DEPOSIT_HEIGHTS = toBytes32("ns:pool:deposit:heights");
export const NS_POOL_LOCKED = toBytes32("ns:pool:staking:locked");
export const NS_POOL_LOCKUP_PERIOD_IN_BLOCKS = toBytes32("ns:pool:staking:lockup:period");
export const NS_POOL_MAX_STAKE = toBytes32("ns:pool:max:stake");
export const NS_POOL_NAME = toBytes32("ns:pool:staking:name");
export const NS_POOL_REWARD_HEIGHTS = toBytes32("ns:pool:reward:heights");
export const NS_POOL_REWARD_PER_BLOCK = toBytes32("ns:pool:reward:per:block");
export const NS_POOL_REWARD_PLATFORM_FEE = toBytes32("ns:pool:reward:platform:fee");
export const NS_POOL_REWARD_TOKEN = toBytes32("ns:pool:reward:token");
export const NS_POOL_REWARD_TOKEN_BALANCE = toBytes32("ns:pool:reward:token:balance");
export const NS_POOL_REWARD_TOKEN_DEPOSITS = toBytes32("ns:pool:reward:token:deposits");
export const NS_POOL_REWARD_TOKEN_DISTRIBUTION = toBytes32("ns:pool:reward:token:distrib");
export const NS_POOL_REWARD_TOKEN_UNI_STABLECOIN_PAIR = toBytes32("ns:pool:reward:token:uni:pair");
export const NS_POOL_STAKING_TARGET = toBytes32("ns:pool:staking:target");
export const NS_POOL_STAKING_TOKEN = toBytes32("ns:pool:staking:token");
export const NS_POOL_STAKING_TOKEN_BALANCE = toBytes32("ns:pool:staking:token:balance");
export const NS_POOL_STAKING_TOKEN_UNI_STABLECOIN_PAIR = toBytes32("ns:pool:staking:token:uni:pair");
export const NS_POOL_TOTAL_REWARD_GIVEN = toBytes32("ns:pool:reward:total:given");
export const NS_ROLES_ADMIN = toBytes32(""); // SAME AS "DEFAULT_ADMIN_ROLE"
export const NS_ROLES_COVER_MANAGER = toBytes32("role:cover:manager");
export const NS_ROLES_GOVERNANCE_ADMIN = toBytes32("role:governance:admin");
export const NS_ROLES_GOVERNANCE_AGENT = toBytes32("role:governance:agent");
export const NS_ROLES_LIQUIDITY_MANAGER = toBytes32("role:liquidity:manager");
export const NS_ROLES_PAUSE_AGENT = toBytes32("role:pause:agent");
export const NS_ROLES_RECOVERY_AGENT = toBytes32("role:recovery:agent");
export const NS_ROLES_UNPAUSE_AGENT = toBytes32("role:unpause:agent");
export const NS_ROLES_UPGRADE_AGENT = toBytes32("role:upgrade:agent");
