type Transaction @entity {
  # txn hash
  id: ID!

  # block txn was included in
  transactionHash: String!
  blockNumber: BigInt!

  # timestamp txn was confirmed
  timestamp: BigInt!
  gasPrice: BigInt!
  gasUsed: BigInt!
  from: String! # address
  to: Bytes

  bondClaimedEvent: [BondClaimedEvent!]! @derivedFrom(field: "transaction")
  bondCreatedEvent: [BondCreatedEvent!]! @derivedFrom(field: "transaction")
  bondPoolSetupEvent: [BondPoolSetupEvent!]! @derivedFrom(field: "transaction")
  blacklistSetEvent: [BlacklistSetEvent!]! @derivedFrom(field: "transaction")
  claimPeriodSetEvent: [ClaimPeriodSetEvent!]!
    @derivedFrom(field: "transaction")
  claimedEvent: [ClaimedEvent!]! @derivedFrom(field: "transaction")
  coverCreatedEvent: [CoverCreatedEvent!]! @derivedFrom(field: "transaction")
  coverCreationFeeSetEvent: [CoverCreationFeeSetEvent!]!
    @derivedFrom(field: "transaction")
  coverCreatorWhitelistUpdatedEvent: [CoverCreatorWhitelistUpdatedEvent!]!
    @derivedFrom(field: "transaction")
  coverInitializedEvent: [CoverInitializedEvent!]!
    @derivedFrom(field: "transaction")
  coverUpdatedEvent: [CoverUpdatedEvent!]! @derivedFrom(field: "transaction")
  coverUserWhitelistUpdatedEvent: [CoverUserWhitelistUpdatedEvent!]!
    @derivedFrom(field: "transaction")
  minCoverCreationStakeSetEvent: [MinCoverCreationStakeSetEvent!]!
    @derivedFrom(field: "transaction")
  minStakeToAddLiquiditySetEvent: [MinStakeToAddLiquiditySetEvent!]!
    @derivedFrom(field: "transaction")
  productCreatedEvent: [ProductCreatedEvent!]!
    @derivedFrom(field: "transaction")
  productStateUpdatedEvent: [ProductStateUpdatedEvent!]!
    @derivedFrom(field: "transaction")
  productUpdatedEvent: [ProductUpdatedEvent!]!
    @derivedFrom(field: "transaction")
  poolCapitalizedEvent: [PoolCapitalizedEvent!]!
    @derivedFrom(field: "transaction")
  reassuranceAddedEvent: [ReassuranceAddedEvent!]!
    @derivedFrom(field: "transaction")
  weightSetEvent: [WeightSetEvent!]! @derivedFrom(field: "transaction")
  feeBurnedEvent: [FeeBurnedEvent!]! @derivedFrom(field: "transaction")
  stakeAddedEvent: [StakeAddedEvent!]! @derivedFrom(field: "transaction")
  stakeRemovedEvent: [StakeRemovedEvent!]! @derivedFrom(field: "transaction")
  icxTokenApprovalEvent: [ICxTokenApprovalEvent!]!
    @derivedFrom(field: "transaction")
  coverageStartSetEvent: [CoverageStartSetEvent!]!
    @derivedFrom(field: "transaction")
  icxTokenTransferEvent: [ICxTokenTransferEvent!]!
    @derivedFrom(field: "transaction")
  cxTokenDeployedEvent: [CxTokenDeployedEvent!]!
    @derivedFrom(field: "transaction")
  attestedEvent: [AttestedEvent!]! @derivedFrom(field: "transaction")
  disputedEvent: [DisputedEvent!]! @derivedFrom(field: "transaction")
  firstReportingStakeSetEvent: [FirstReportingStakeSetEvent!]!
    @derivedFrom(field: "transaction")
  refutedEvent: [RefutedEvent!]! @derivedFrom(field: "transaction")
  reportedEvent: [ReportedEvent!]! @derivedFrom(field: "transaction")
  reporterCommissionSetEvent: [ReporterCommissionSetEvent!]!
    @derivedFrom(field: "transaction")
  reportingBurnRateSetEvent: [ReportingBurnRateSetEvent!]!
    @derivedFrom(field: "transaction")
  liquidityStateUpdateIntervalSetEvent: [LiquidityStateUpdateIntervalSetEvent!]!
    @derivedFrom(field: "transaction")
  maxLendingRatioSetEvent: [MaxLendingRatioSetEvent!]!
    @derivedFrom(field: "transaction")
  riskPoolingPeriodSetEvent: [RiskPoolingPeriodSetEvent!]!
    @derivedFrom(field: "transaction")
  strategyAddedEvent: [StrategyAddedEvent!]! @derivedFrom(field: "transaction")
  strategyDeletedEvent: [StrategyDeletedEvent!]!
    @derivedFrom(field: "transaction")
  strategyDisabledEvent: [StrategyDisabledEvent!]!
    @derivedFrom(field: "transaction")
  coverPurchasedEvent: [CoverPurchasedEvent!]!
    @derivedFrom(field: "transaction")
  coverPolicyRateSetEvent: [CoverPolicyRateSetEvent!]!
    @derivedFrom(field: "transaction")
  coverageLagSetEvent: [CoverageLagSetEvent!]!
    @derivedFrom(field: "transaction")
  contractAddedEvent: [ContractAddedEvent!]! @derivedFrom(field: "transaction")
  contractUpgradedEvent: [ContractUpgradedEvent!]!
    @derivedFrom(field: "transaction")
  initializedEvent: [InitializedEvent!]! @derivedFrom(field: "transaction")
  memberAddedEvent: [MemberAddedEvent!]! @derivedFrom(field: "transaction")
  memberRemovedEvent: [MemberRemovedEvent!]! @derivedFrom(field: "transaction")
  roleAdminChangedEvent: [RoleAdminChangedEvent!]!
    @derivedFrom(field: "transaction")
  roleGrantedEvent: [RoleGrantedEvent!]! @derivedFrom(field: "transaction")
  roleRevokedEvent: [RoleRevokedEvent!]! @derivedFrom(field: "transaction")
  cooldownPeriodConfiguredEvent: [CooldownPeriodConfiguredEvent!]!
    @derivedFrom(field: "transaction")
  finalizedEvent: [FinalizedEvent!]! @derivedFrom(field: "transaction")
  governanceBurnedEvent: [GovernanceBurnedEvent!]!
    @derivedFrom(field: "transaction")
  reportClosedEvent: [ReportClosedEvent!]! @derivedFrom(field: "transaction")
  reporterRewardDistributedEvent: [ReporterRewardDistributedEvent!]!
    @derivedFrom(field: "transaction")
  resolvedEvent: [ResolvedEvent!]! @derivedFrom(field: "transaction")
  unstakenEvent: [UnstakenEvent!]! @derivedFrom(field: "transaction")
  depositedEvent: [DepositedEvent!]! @derivedFrom(field: "transaction")
  poolClosedEvent: [PoolClosedEvent!]! @derivedFrom(field: "transaction")
  poolUpdatedEvent: [PoolUpdatedEvent!]! @derivedFrom(field: "transaction")
  rewardsWithdrawnEvent: [RewardsWithdrawnEvent!]!
    @derivedFrom(field: "transaction")
  withdrawnEvent: [WithdrawnEvent!]! @derivedFrom(field: "transaction")
  pausersSetEvent: [PausersSetEvent!]! @derivedFrom(field: "transaction")
  ivaultApprovalEvent: [IVaultApprovalEvent!]!
    @derivedFrom(field: "transaction")
  enteredEvent: [EnteredEvent!]! @derivedFrom(field: "transaction")
  exitedEvent: [ExitedEvent!]! @derivedFrom(field: "transaction")
  flashLoanBorrowedEvent: [FlashLoanBorrowedEvent!]!
    @derivedFrom(field: "transaction")
  governanceTransferEvent: [GovernanceTransferEvent!]!
    @derivedFrom(field: "transaction")
  interestAccruedEvent: [InterestAccruedEvent!]!
    @derivedFrom(field: "transaction")
  npmStakenEvent: [NpmStakenEvent!]! @derivedFrom(field: "transaction")
  npmUnstakenEvent: [NpmUnstakenEvent!]! @derivedFrom(field: "transaction")
  podsIssuedEvent: [PodsIssuedEvent!]! @derivedFrom(field: "transaction")
  podsRedeemedEvent: [PodsRedeemedEvent!]! @derivedFrom(field: "transaction")
  strategyReceiptEvent: [StrategyReceiptEvent!]!
    @derivedFrom(field: "transaction")
  strategyTransferEvent: [StrategyTransferEvent!]!
    @derivedFrom(field: "transaction")
  ivaultTransferEvent: [IVaultTransferEvent!]!
    @derivedFrom(field: "transaction")
  vaultDeployedEvent: [VaultDeployedEvent!]! @derivedFrom(field: "transaction")
}

type BondClaimedEvent @entity {
  id: ID!

  account: String!
  amount: BigInt!

  # creation stats
  transaction: Transaction!
}

type BondCreatedEvent @entity {
  id: ID!

  account: String!
  lpTokens: BigInt!
  npmToVest: BigInt!
  unlockDate: BigInt!

  transaction: Transaction!
}

type BondPoolSetupEvent @entity {
  id: ID!

  lpToken: String!
  treasury: String!
  bondDiscountRate: BigInt!
  maxBondAmount: BigInt!
  vestingTerm: BigInt!
  npmToTopUpNow: BigInt!

  transaction: Transaction!
}

type BlacklistSetEvent @entity {
  id: ID!

  coverKey: String!
  productKey: String!
  incidentDate: BigInt!
  account: String!
  status: Boolean!

  transaction: Transaction!
}

type ClaimPeriodSetEvent @entity {
  id: ID!

  coverKey: String!
  previous: BigInt!
  current: BigInt!

  transaction: Transaction!
}

type ClaimedEvent @entity {
  id: ID!

  cxToken: String!
  coverKey: String!
  productKey: String!
  incidentDate: BigInt!
  account: String!
  reporter: String!
  amount: BigInt!
  reporterFee: BigInt!
  platformFee: BigInt!
  claimed: BigInt!

  transaction: Transaction!
}

type CoverCreatedEvent @entity {
  id: ID!

  coverKey: String!
  info: String!
  tokenName: String!
  tokenSymbol: String!
  supportsProducts: Boolean!
  requiresWhitelist: Boolean!

  transaction: Transaction!
}

type CoverCreationFeeSetEvent @entity {
  id: ID!

  previous: BigInt!
  current: BigInt!

  transaction: Transaction!
}

type CoverCreatorWhitelistUpdatedEvent @entity {
  id: ID!

  account: String!
  status: Boolean!

  transaction: Transaction!
}

type CoverInitializedEvent @entity {
  id: ID!

  stablecoin: String!
  withName: String!

  transaction: Transaction!
}

type CoverUpdatedEvent @entity {
  id: ID!

  coverKey: String!
  info: String!

  transaction: Transaction!
}

type CoverUserWhitelistUpdatedEvent @entity {
  id: ID!

  coverKey: String!
  productKey: String!
  account: String!
  status: Boolean!

  transaction: Transaction!
}

type MinCoverCreationStakeSetEvent @entity {
  id: ID!

  previous: BigInt!
  current: BigInt!

  transaction: Transaction!
}

type MinStakeToAddLiquiditySetEvent @entity {
  id: ID!

  previous: BigInt!
  current: BigInt!

  transaction: Transaction!
}

type ProductCreatedEvent @entity {
  id: ID!

  coverKey: String!
  productKey: String!
  info: String!

  transaction: Transaction!
}

type ProductStateUpdatedEvent @entity {
  id: ID!

  coverKey: String!
  productKey: String!
  updatedBy: String!
  status: Boolean!
  reason: String!

  transaction: Transaction!
}

type ProductUpdatedEvent @entity {
  id: ID!

  coverKey: String!
  productKey: String!
  info: String!

  transaction: Transaction!
}

type PoolCapitalizedEvent @entity {
  id: ID!

  coverKey: String!
  productKey: String!
  incidentDate: BigInt!
  amount: BigInt!

  transaction: Transaction!
}

type ReassuranceAddedEvent @entity {
  id: ID!

  coverKey: String!
  onBehalfOf: String!
  amount: BigInt!

  transaction: Transaction!
}

type WeightSetEvent @entity {
  id: ID!

  coverKey: String!
  weight: BigInt!

  transaction: Transaction!
}

type FeeBurnedEvent @entity {
  id: ID!

  coverKey: String!
  amount: BigInt!

  transaction: Transaction!
}

type StakeAddedEvent @entity {
  id: ID!

  coverKey: String!
  account: String!
  amount: BigInt!

  transaction: Transaction!
}

type StakeRemovedEvent @entity {
  id: ID!

  coverKey: String!
  account: String!
  amount: BigInt!

  transaction: Transaction!
}

type CxTokenDeployedEvent @entity {
  id: ID!

  cxToken: String!
  store: String!
  coverKey: String!
  productKey: String!
  tokenName: String!
  expiryDate: BigInt!

  transaction: Transaction!
}

type AttestedEvent @entity {
  id: ID!

  coverKey: String!
  productKey: String!
  witness: String!
  incidentDate: BigInt!
  stake: BigInt!

  transaction: Transaction!
}

type DisputedEvent @entity {
  id: ID!

  coverKey: String!
  productKey: String!
  reporter: String!
  incidentDate: BigInt!
  info: String!
  initialStake: BigInt!

  transaction: Transaction!
}

type FirstReportingStakeSetEvent @entity {
  id: ID!

  coverKey: String!
  previous: BigInt!
  current: BigInt!

  transaction: Transaction!
}

type RefutedEvent @entity {
  id: ID!

  coverKey: String!
  productKey: String!
  witness: String!
  incidentDate: BigInt!
  stake: BigInt!

  transaction: Transaction!
}

type ReportedEvent @entity {
  id: ID!

  coverKey: String!
  productKey: String!
  reporter: String!
  incidentDate: BigInt!
  info: String!
  initialStake: BigInt!
  resolutionTimestamp: BigInt!

  transaction: Transaction!
}

type ReporterCommissionSetEvent @entity {
  id: ID!

  previous: BigInt!
  current: BigInt!

  transaction: Transaction!
}

type ReportingBurnRateSetEvent @entity {
  id: ID!

  previous: BigInt!
  current: BigInt!

  transaction: Transaction!
}

type LiquidityStateUpdateIntervalSetEvent @entity {
  id: ID!

  duration: BigInt!

  transaction: Transaction!
}

type MaxLendingRatioSetEvent @entity {
  id: ID!

  ratio: BigInt!

  transaction: Transaction!
}

type RiskPoolingPeriodSetEvent @entity {
  id: ID!

  coverKey: String!
  lendingPeriod: BigInt!
  withdrawalWindow: BigInt!

  transaction: Transaction!
}

type StrategyAddedEvent @entity {
  id: ID!

  strategy: String!

  transaction: Transaction!
}

type StrategyDeletedEvent @entity {
  id: ID!

  strategy: String!

  transaction: Transaction!
}

type StrategyDisabledEvent @entity {
  id: ID!

  strategy: String!

  transaction: Transaction!
}

type CoverPurchasedEvent @entity {
  id: ID!

  onBehalfOf: String!
  coverKey: String!
  productKey: String!
  coverDuration: BigInt!
  amountToCover: BigInt!
  referralCode: String!
  cxToken: String!
  fee: BigInt!
  platformFee: BigInt!
  expiresOn: BigInt!
  policyId: BigInt!

  transaction: Transaction!
}

type CoverPolicyRateSetEvent @entity {
  id: ID!

  coverKey: String!
  floor: BigInt!
  ceiling: BigInt!

  transaction: Transaction!
}

type CoverageLagSetEvent @entity {
  id: ID!

  coverKey: String!
  window: BigInt!

  transaction: Transaction!
}

type ContractAddedEvent @entity {
  id: ID!

  namespace: String!
  key: String!
  contractAddress: String!

  transaction: Transaction!
}

type ContractUpgradedEvent @entity {
  id: ID!

  namespace: String!
  key: String!
  previous: String!
  current: String!

  transaction: Transaction!
}

type InitializedEvent @entity {
  id: ID!

  burner: String!
  uniswapV2RouterLike: String!
  uniswapV2FactoryLike: String!
  npm: String!
  treasury: String!
  priceOracle: String!
  coverCreationFee: BigInt!
  minCoverCreationStake: BigInt!
  minStakeToAddLiquidity: BigInt!
  firstReportingStake: BigInt!
  claimPeriod: BigInt!
  reportingBurnRate: BigInt!
  governanceReporterCommission: BigInt!
  claimPlatformFee: BigInt!
  claimReporterCommission: BigInt!
  flashLoanFee: BigInt!
  flashLoanFeeProtocol: BigInt!
  resolutionCoolDownPeriod: BigInt!
  stateUpdateInterval: BigInt!
  maxLendingRatio: BigInt!
  lendingPeriod: BigInt!
  withdrawalWindow: BigInt!
  policyFloor: BigInt!
  policyCeiling: BigInt!

  transaction: Transaction!
}

type MemberAddedEvent @entity {
  id: ID!

  member: String!

  transaction: Transaction!
}

type MemberRemovedEvent @entity {
  id: ID!

  member: String!

  transaction: Transaction!
}

type RoleAdminChangedEvent @entity {
  id: ID!

  role: String!
  previousAdminRole: String!
  newAdminRole: String!

  transaction: Transaction!
}

type RoleGrantedEvent @entity {
  id: ID!

  role: String!
  account: String!
  sender: String!

  transaction: Transaction!
}

type RoleRevokedEvent @entity {
  id: ID!

  role: String!
  account: String!
  sender: String!

  transaction: Transaction!
}

type CooldownPeriodConfiguredEvent @entity {
  id: ID!

  coverKey: String!
  period: BigInt!

  transaction: Transaction!
}

type FinalizedEvent @entity {
  id: ID!

  coverKey: String!
  productKey: String!
  finalizer: String!
  incidentDate: BigInt!

  transaction: Transaction!
}

type GovernanceBurnedEvent @entity {
  id: ID!

  coverKey: String!
  productKey: String!
  caller: String!
  burner: String!
  originalReward: BigInt!
  burnedAmount: BigInt!

  transaction: Transaction!
}

type ReportClosedEvent @entity {
  id: ID!

  coverKey: String!
  productKey: String!
  closedBy: String!
  incidentDate: BigInt!

  transaction: Transaction!
}

type ReporterRewardDistributedEvent @entity {
  id: ID!

  coverKey: String!
  productKey: String!
  caller: String!
  reporter: String!
  originalReward: BigInt!
  reporterReward: BigInt!

  transaction: Transaction!
}

type ResolvedEvent @entity {
  id: ID!

  coverKey: String!
  productKey: String!
  incidentDate: BigInt!
  resolutionDeadline: BigInt!
  decision: Boolean!
  emergency: Boolean!
  claimBeginsFrom: BigInt!
  claimExpiresAt: BigInt!

  transaction: Transaction!
}

type UnstakenEvent @entity {
  id: ID!

  coverKey: String!
  productKey: String!
  caller: String!
  originalStake: BigInt!
  reward: BigInt!

  transaction: Transaction!
}

type DepositedEvent @entity {
  id: ID!

  key: String!
  account: String!
  token: String!
  amount: BigInt!

  transaction: Transaction!
}

type PoolClosedEvent @entity {
  id: ID!

  key: String!
  name: String!

  transaction: Transaction!
}

type PoolUpdatedEvent @entity {
  id: ID!

  key: String!
  name: String!
  poolType: Int!
  stakingToken: String!
  uniStakingTokenDollarPair: String!
  rewardToken: String!
  uniRewardTokenDollarPair: String!
  stakingTarget: BigInt!
  maxStake: BigInt!
  platformFee: BigInt!
  rewardPerBlock: BigInt!
  lockupPeriod: BigInt!
  rewardTokenToDeposit: BigInt!

  transaction: Transaction!
}

type RewardsWithdrawnEvent @entity {
  id: ID!

  key: String!
  account: String!
  token: String!
  rewards: BigInt!
  platformFee: BigInt!

  transaction: Transaction!
}

type WithdrawnEvent @entity {
  id: ID!

  key: String!
  account: String!
  token: String!
  amount: BigInt!

  transaction: Transaction!
}

type PausersSetEvent @entity {
  id: ID!

  addedBy: String!
  accounts: [String!]!
  statuses: [Boolean!]!

  transaction: Transaction!
}

type IVaultApprovalEvent @entity {
  id: ID!

  owner: String!
  spender: String!
  value: BigInt!

  transaction: Transaction!
}

type EnteredEvent @entity {
  id: ID!

  coverKey: String!
  account: String!

  transaction: Transaction!
}

type ExitedEvent @entity {
  id: ID!

  coverKey: String!
  account: String!

  transaction: Transaction!
}

type FlashLoanBorrowedEvent @entity {
  id: ID!

  lender: String!
  borrower: String!
  stablecoin: String!
  amount: BigInt!
  fee: BigInt!

  transaction: Transaction!
}

type GovernanceTransferEvent @entity {
  id: ID!

  to: String!
  amount: BigInt!

  transaction: Transaction!
}

type InterestAccruedEvent @entity {
  id: ID!

  coverKey: String!

  transaction: Transaction!
}

type NpmStakenEvent @entity {
  id: ID!

  account: String!
  amount: BigInt!

  transaction: Transaction!
}

type NpmUnstakenEvent @entity {
  id: ID!

  account: String!
  amount: BigInt!

  transaction: Transaction!
}

type PodsIssuedEvent @entity {
  id: ID!

  account: String!
  issued: BigInt!
  liquidityAdded: BigInt!
  referralCode: String!

  transaction: Transaction!
}

type PodsRedeemedEvent @entity {
  id: ID!

  account: String!
  redeemed: BigInt!
  liquidityReleased: BigInt!

  transaction: Transaction!
}

type StrategyReceiptEvent @entity {
  id: ID!

  token: String!
  strategy: String!
  name: String!
  amount: BigInt!
  income: BigInt!
  loss: BigInt!

  transaction: Transaction!
}

type StrategyTransferEvent @entity {
  id: ID!

  token: String!
  strategy: String!
  name: String!
  amount: BigInt!

  transaction: Transaction!
}

type IVaultTransferEvent @entity {
  id: ID!

  from: String!
  to: String!
  value: BigInt!

  transaction: Transaction!
}

type VaultDeployedEvent @entity {
  id: ID!

  vault: String!
  coverKey: String!
  name: String!
  symbol: String!

  transaction: Transaction!
}

type ICxTokenApprovalEvent @entity {
  id: ID!

  owner: String!
  spender: String!
  value: BigInt!

  transaction: Transaction!
}

type CoverageStartSetEvent @entity {
  id: ID!

  policyId: BigInt!
  coverKey: String!
  productKey: String!
  account: String!
  effectiveFrom: BigInt!
  amount: BigInt!

  transaction: Transaction!
}

type ICxTokenTransferEvent @entity {
  id: ID!

  from: String!
  to: String!
  value: BigInt!

  transaction: Transaction!
}

type IBondPoolInstance @entity {
  id: ID!
}

type IClaimsProcessorInstance @entity {
  id: ID!
}

type ICoverInstance @entity {
  id: ID!
}

type ICoverReassuranceInstance @entity {
  id: ID!
}

type ICoverStakeInstance @entity {
  id: ID!
}

type ICxTokenInstance @entity {
  id: ID!
}

type ICxTokenFactoryInstance @entity {
  id: ID!
}

type IGovernanceInstance @entity {
  id: ID!
}

type ILiquidityEngineInstance @entity {
  id: ID!
}

type IPolicyInstance @entity {
  id: ID!
}

type IPolicyAdminInstance @entity {
  id: ID!
}

type IResolutionInstance @entity {
  id: ID!
}

type IStakingPoolsInstance @entity {
  id: ID!
}

type IStoreInstance @entity {
  id: ID!
}

type IVaultInstance @entity {
  id: ID!
}

type IVaultDelegateInstance @entity {
  id: ID!
}

type IVaultFactoryInstance @entity {
  id: ID!
}
