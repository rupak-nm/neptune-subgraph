type Transaction @entity {
  # txn hash
  id: ID!

  # block txn was included in
  blockNumber: BigInt!

  # timestamp txn was confirmed
  timestamp: BigInt!
  gasPrice: BigInt!
  gasUsed: BigInt!
  from: Bytes! # address
}

type BondClaimedEvent @entity {
  id: ID!

  account: Bytes!
  amount: BigInt!

  # creation stats
  createdAtTimestamp: BigInt!
  transaction: Transaction!
}

type BondCreatedEvent @entity {
  id: ID!

  account: Bytes!
  lpTokens: BigInt!
  npmToVest: BigInt!
  unlockDate: BigInt!

  createdAtTimestamp: BigInt!
  transaction: Transaction!
}

type BondPoolSetupEvent @entity {
  id: ID!

  lpToken: Bytes!
  treasury: Bytes!
  bondDiscountRate: BigInt!
  maxBondAmount: BigInt!
  vestingTerm: BigInt!
  npmToTopUpNow: BigInt!

  createdAtTimestamp: BigInt!
  transaction: Transaction!
}

type BlacklistSetEvent @entity {
  id: ID!

  coverKey: Bytes!
  productKey: Bytes!
  incidentDate: BigInt!
  account: Bytes!
  status: Boolean!

  createdAtTimestamp: BigInt!
  transaction: Transaction!
}

type ClaimPeriodSetEvent @entity {
  id: ID!

  coverKey: Bytes!
  previous: BigInt!
  current: BigInt!

  createdAtTimestamp: BigInt!
  transaction: Transaction!
}

type ClaimedEvent @entity {
  id: ID!

  cxToken: Bytes!
  coverKey: Bytes!
  productKey: Bytes!
  incidentDate: BigInt!
  account: Bytes!
  reporter: Bytes!
  amount: BigInt!
  reporterFee: BigInt!
  platformFee: BigInt!
  claimed: BigInt!

  createdAtTimestamp: BigInt!
  transaction: Transaction!
}

type CoverCreatedEvent @entity {
  id: ID!

  coverKey: Bytes!
  info: String!
  tokenName: String!
  tokenSymbol: String!
  supportsProducts: Boolean!
  requiresWhitelist: Boolean!

  createdAtTimestamp: BigInt!
  transaction: Transaction!
}

type CoverCreationFeeSetEvent @entity {
  id: ID!

  previous: BigInt!
  current: BigInt!

  createdAtTimestamp: BigInt!
  transaction: Transaction!
}

type CoverCreatorWhitelistUpdatedEvent @entity {
  id: ID!

  account: Bytes!
  status: Boolean!

  createdAtTimestamp: BigInt!
  transaction: Transaction!
}

type CoverInitializedEvent @entity {
  id: ID!

  stablecoin: Bytes!
  withName: Bytes!

  createdAtTimestamp: BigInt!
  transaction: Transaction!
}

type CoverUpdatedEvent @entity {
  id: ID!

  coverKey: Bytes!
  info: String!

  createdAtTimestamp: BigInt!
  transaction: Transaction!
}

type CoverUserWhitelistUpdatedEvent @entity {
  id: ID!

  coverKey: Bytes!
  productKey: Bytes!
  account: Bytes!
  status: Boolean!

  createdAtTimestamp: BigInt!
  transaction: Transaction!
}

type MinCoverCreationStakeSetEvent @entity {
  id: ID!

  previous: BigInt!
  current: BigInt!

  createdAtTimestamp: BigInt!
  transaction: Transaction!
}

type MinStakeToAddLiquiditySetEvent @entity {
  id: ID!

  previous: BigInt!
  current: BigInt!

  createdAtTimestamp: BigInt!
  transaction: Transaction!
}

type ProductCreatedEvent @entity {
  id: ID!

  coverKey: Bytes!
  productKey: Bytes!
  info: String!

  createdAtTimestamp: BigInt!
  transaction: Transaction!
}

type ProductStateUpdatedEvent @entity {
  id: ID!

  coverKey: Bytes!
  productKey: Bytes!
  updatedBy: Bytes!
  status: Boolean!
  reason: String!

  createdAtTimestamp: BigInt!
  transaction: Transaction!
}

type ProductUpdatedEvent @entity {
  id: ID!

  coverKey: Bytes!
  productKey: Bytes!
  info: String!

  createdAtTimestamp: BigInt!
  transaction: Transaction!
}

type PoolCapitalizedEvent @entity {
  id: ID!

  coverKey: Bytes!
  productKey: Bytes!
  incidentDate: BigInt!
  amount: BigInt!

  createdAtTimestamp: BigInt!
  transaction: Transaction!
}

type ReassuranceAddedEvent @entity {
  id: ID!

  coverKey: Bytes!
  onBehalfOf: Bytes!
  amount: BigInt!

  createdAtTimestamp: BigInt!
  transaction: Transaction!
}

type WeightSetEvent @entity {
  id: ID!

  coverKey: Bytes!
  weight: BigInt!

  createdAtTimestamp: BigInt!
  transaction: Transaction!
}

type FeeBurnedEvent @entity {
  id: ID!

  coverKey: Bytes!
  amount: BigInt!

  createdAtTimestamp: BigInt!
  transaction: Transaction!
}

type StakeAddedEvent @entity {
  id: ID!

  coverKey: Bytes!
  account: Bytes!
  amount: BigInt!

  createdAtTimestamp: BigInt!
  transaction: Transaction!
}

type StakeRemovedEvent @entity {
  id: ID!

  coverKey: Bytes!
  account: Bytes!
  amount: BigInt!

  createdAtTimestamp: BigInt!
  transaction: Transaction!
}

type CxTokenDeployedEvent @entity {
  id: ID!

  cxToken: Bytes!
  store: Bytes!
  coverKey: Bytes!
  productKey: Bytes!
  tokenName: String!
  expiryDate: BigInt!

  createdAtTimestamp: BigInt!
  transaction: Transaction!
}

type AttestedEvent @entity {
  id: ID!

  coverKey: Bytes!
  productKey: Bytes!
  witness: Bytes!
  incidentDate: BigInt!
  stake: BigInt!

  createdAtTimestamp: BigInt!
  transaction: Transaction!
}

type DisputedEvent @entity {
  id: ID!

  coverKey: Bytes!
  productKey: Bytes!
  reporter: Bytes!
  incidentDate: BigInt!
  info: String!
  initialStake: BigInt!

  createdAtTimestamp: BigInt!
  transaction: Transaction!
}

type FirstReportingStakeSetEvent @entity {
  id: ID!

  coverKey: Bytes!
  previous: BigInt!
  current: BigInt!

  createdAtTimestamp: BigInt!
  transaction: Transaction!
}

type RefutedEvent @entity {
  id: ID!

  coverKey: Bytes!
  productKey: Bytes!
  witness: Bytes!
  incidentDate: BigInt!
  stake: BigInt!

  createdAtTimestamp: BigInt!
  transaction: Transaction!
}

type ReportedEvent @entity {
  id: ID!

  coverKey: Bytes!
  productKey: Bytes!
  reporter: Bytes!
  incidentDate: BigInt!
  info: String!
  initialStake: BigInt!
  resolutionTimestamp: BigInt!

  createdAtTimestamp: BigInt!
  transaction: Transaction!
}

type ReporterCommissionSetEvent @entity {
  id: ID!

  previous: BigInt!
  current: BigInt!

  createdAtTimestamp: BigInt!
  transaction: Transaction!
}

type ReportingBurnRateSetEvent @entity {
  id: ID!

  previous: BigInt!
  current: BigInt!

  createdAtTimestamp: BigInt!
  transaction: Transaction!
}

type LiquidityStateUpdateIntervalSetEvent @entity {
  id: ID!

  duration: BigInt!

  createdAtTimestamp: BigInt!
  transaction: Transaction!
}

type MaxLendingRatioSetEvent @entity {
  id: ID!

  ratio: BigInt!

  createdAtTimestamp: BigInt!
  transaction: Transaction!
}

type RiskPoolingPeriodSetEvent @entity {
  id: ID!

  coverKey: Bytes!
  lendingPeriod: BigInt!
  withdrawalWindow: BigInt!

  createdAtTimestamp: BigInt!
  transaction: Transaction!
}

type StrategyAddedEvent @entity {
  id: ID!

  strategy: Bytes!

  createdAtTimestamp: BigInt!
  transaction: Transaction!
}

type StrategyDeletedEvent @entity {
  id: ID!

  strategy: Bytes!

  createdAtTimestamp: BigInt!
  transaction: Transaction!
}

type StrategyDisabledEvent @entity {
  id: ID!

  strategy: Bytes!

  createdAtTimestamp: BigInt!
  transaction: Transaction!
}

type CoverPurchasedEvent @entity {
  id: ID!

  onBehalfOf: Bytes!
  coverKey: Bytes!
  productKey: Bytes!
  coverDuration: BigInt!
  amountToCover: BigInt!
  referralCode: Bytes!
  cxToken: Bytes!
  fee: BigInt!
  platformFee: BigInt!
  expiresOn: BigInt!
  policyId: BigInt!

  createdAtTimestamp: BigInt!
  transaction: Transaction!
}

type CoverPolicyRateSetEvent @entity {
  id: ID!

  coverKey: Bytes!
  floor: BigInt!
  ceiling: BigInt!

  createdAtTimestamp: BigInt!
  transaction: Transaction!
}

type CoverageLagSetEvent @entity {
  id: ID!

  coverKey: Bytes!
  window: BigInt!

  createdAtTimestamp: BigInt!
  transaction: Transaction!
}

type ContractAddedEvent @entity {
  id: ID!

  namespace: String!
  key: String!
  contractAddress: Bytes!

  createdAtTimestamp: BigInt!
  transaction: Transaction!
}

type ContractUpgradedEvent @entity {
  id: ID!

  namespace: String!
  key: String!
  previous: Bytes!
  current: Bytes!

  createdAtTimestamp: BigInt!
  transaction: Transaction!
}

type InitializedEvent @entity {
  id: ID!

  burner: Bytes!
  uniswapV2RouterLike: Bytes!
  uniswapV2FactoryLike: Bytes!
  npm: Bytes!
  treasury: Bytes!
  priceOracle: Bytes!
  coverCreationFee: BigInt!
  minCoverCreationStake: BigInt!
  minStakeToAddLiquidity: BigInt!
  firstReportingStake: BigInt!
  claimPeriod: BigInt!
  reportingBurnRate: BigInt!
  governanceReporterCommission: BigInt!
  claimPlatformFee: BigInt!
  claimReporterCommission: BigInt!
  flashLoanFee: BigInt!
  flashLoanFeeProtocol: BigInt!
  resolutionCoolDownPeriod: BigInt!
  stateUpdateInterval: BigInt!
  maxLendingRatio: BigInt!
  lendingPeriod: BigInt!
  withdrawalWindow: BigInt!
  policyFloor: BigInt!
  policyCeiling: BigInt!

  createdAtTimestamp: BigInt!
  transaction: Transaction!
}

type MemberAddedEvent @entity {
  id: ID!

  member: Bytes!

  createdAtTimestamp: BigInt!
  transaction: Transaction!
}

type MemberRemovedEvent @entity {
  id: ID!

  member: Bytes!

  createdAtTimestamp: BigInt!
  transaction: Transaction!
}

type RoleAdminChangedEvent @entity {
  id: ID!

  role: Bytes!
  previousAdminRole: Bytes!
  newAdminRole: Bytes!

  createdAtTimestamp: BigInt!
  transaction: Transaction!
}

type RoleGrantedEvent @entity {
  id: ID!

  role: Bytes!
  account: Bytes!
  sender: Bytes!

  createdAtTimestamp: BigInt!
  transaction: Transaction!
}

type RoleRevokedEvent @entity {
  id: ID!

  role: Bytes!
  account: Bytes!
  sender: Bytes!

  createdAtTimestamp: BigInt!
  transaction: Transaction!
}

type CooldownPeriodConfiguredEvent @entity {
  id: ID!

  coverKey: Bytes!
  period: BigInt!

  createdAtTimestamp: BigInt!
  transaction: Transaction!
}

type FinalizedEvent @entity {
  id: ID!

  coverKey: Bytes!
  productKey: Bytes!
  finalizer: Bytes!
  incidentDate: BigInt!

  createdAtTimestamp: BigInt!
  transaction: Transaction!
}

type GovernanceBurnedEvent @entity {
  id: ID!

  coverKey: Bytes!
  productKey: Bytes!
  caller: Bytes!
  burner: Bytes!
  originalReward: BigInt!
  burnedAmount: BigInt!

  createdAtTimestamp: BigInt!
  transaction: Transaction!
}

type ReportClosedEvent @entity {
  id: ID!

  coverKey: Bytes!
  productKey: Bytes!
  closedBy: Bytes!
  incidentDate: BigInt!

  createdAtTimestamp: BigInt!
  transaction: Transaction!
}

type ReporterRewardDistributedEvent @entity {
  id: ID!

  coverKey: Bytes!
  productKey: Bytes!
  caller: Bytes!
  reporter: Bytes!
  originalReward: BigInt!
  reporterReward: BigInt!

  createdAtTimestamp: BigInt!
  transaction: Transaction!
}

type ResolvedEvent @entity {
  id: ID!

  coverKey: Bytes!
  productKey: Bytes!
  incidentDate: BigInt!
  resolutionDeadline: BigInt!
  decision: Boolean!
  emergency: Boolean!
  claimBeginsFrom: BigInt!
  claimExpiresAt: BigInt!

  createdAtTimestamp: BigInt!
  transaction: Transaction!
}

type UnstakenEvent @entity {
  id: ID!

  coverKey: Bytes!
  productKey: Bytes!
  caller: Bytes!
  originalStake: BigInt!
  reward: BigInt!

  createdAtTimestamp: BigInt!
  transaction: Transaction!
}

type DepositedEvent @entity {
  id: ID!

  key: Bytes!
  account: Bytes!
  token: Bytes!
  amount: BigInt!

  createdAtTimestamp: BigInt!
  transaction: Transaction!
}

type PoolClosedEvent @entity {
  id: ID!

  key: Bytes!
  name: String!

  createdAtTimestamp: BigInt!
  transaction: Transaction!
}

type PoolUpdatedEvent @entity {
  id: ID!

  key: Bytes!
  name: String!
  poolType: Int!
  stakingToken: Bytes!
  uniStakingTokenDollarPair: Bytes!
  rewardToken: Bytes!
  uniRewardTokenDollarPair: Bytes!
  stakingTarget: BigInt!
  maxStake: BigInt!
  platformFee: BigInt!
  rewardPerBlock: BigInt!
  lockupPeriod: BigInt!
  rewardTokenToDeposit: BigInt!

  createdAtTimestamp: BigInt!
  transaction: Transaction!
}

type RewardsWithdrawnEvent @entity {
  id: ID!

  key: Bytes!
  account: Bytes!
  token: Bytes!
  rewards: BigInt!
  platformFee: BigInt!

  createdAtTimestamp: BigInt!
  transaction: Transaction!
}

type WithdrawnEvent @entity {
  id: ID!

  key: Bytes!
  account: Bytes!
  token: Bytes!
  amount: BigInt!

  createdAtTimestamp: BigInt!
  transaction: Transaction!
}

type PausersSetEvent @entity {
  id: ID!

  addedBy: Bytes!
  accounts: [Bytes!]!
  statuses: [Boolean!]!

  createdAtTimestamp: BigInt!
  transaction: Transaction!
}

type ApprovalEvent @entity {
  id: ID!

  owner: Bytes!
  spender: Bytes!
  value: BigInt!

  createdAtTimestamp: BigInt!
  transaction: Transaction!
}

type EnteredEvent @entity {
  id: ID!

  coverKey: Bytes!
  account: Bytes!

  createdAtTimestamp: BigInt!
  transaction: Transaction!
}

type ExitedEvent @entity {
  id: ID!

  coverKey: Bytes!
  account: Bytes!

  createdAtTimestamp: BigInt!
  transaction: Transaction!
}

type FlashLoanBorrowedEvent @entity {
  id: ID!

  lender: Bytes!
  borrower: Bytes!
  stablecoin: Bytes!
  amount: BigInt!
  fee: BigInt!

  createdAtTimestamp: BigInt!
  transaction: Transaction!
}

type GovernanceTransferEvent @entity {
  id: ID!

  to: Bytes!
  amount: BigInt!

  createdAtTimestamp: BigInt!
  transaction: Transaction!
}

type InterestAccruedEvent @entity {
  id: ID!

  coverKey: Bytes!

  createdAtTimestamp: BigInt!
  transaction: Transaction!
}

type NpmStakenEvent @entity {
  id: ID!

  account: Bytes!
  amount: BigInt!

  createdAtTimestamp: BigInt!
  transaction: Transaction!
}

type NpmUnstakenEvent @entity {
  id: ID!

  account: Bytes!
  amount: BigInt!

  createdAtTimestamp: BigInt!
  transaction: Transaction!
}

type PodsIssuedEvent @entity {
  id: ID!

  account: Bytes!
  issued: BigInt!
  liquidityAdded: BigInt!
  referralCode: Bytes!

  createdAtTimestamp: BigInt!
  transaction: Transaction!
}

type PodsRedeemedEvent @entity {
  id: ID!

  account: Bytes!
  redeemed: BigInt!
  liquidityReleased: BigInt!

  createdAtTimestamp: BigInt!
  transaction: Transaction!
}

type StrategyReceiptEvent @entity {
  id: ID!

  token: Bytes!
  strategy: Bytes!
  name: Bytes!
  amount: BigInt!
  income: BigInt!
  loss: BigInt!

  createdAtTimestamp: BigInt!
  transaction: Transaction!
}

type StrategyTransferEvent @entity {
  id: ID!

  token: Bytes!
  strategy: Bytes!
  name: Bytes!
  amount: BigInt!

  createdAtTimestamp: BigInt!
  transaction: Transaction!
}

type TransferEvent @entity {
  id: ID!

  from: Bytes!
  to: Bytes!
  value: BigInt!

  createdAtTimestamp: BigInt!
  transaction: Transaction!
}

type VaultDeployedEvent @entity {
  id: ID!

  vault: Bytes!
  coverKey: Bytes!
  name: String!
  symbol: String!

  createdAtTimestamp: BigInt!
  transaction: Transaction!
}
